/****************************************************************************************************************************************************
DXProperty_ver06		: 冷媒の物性値を計算するクラス
CNewtonRaphsonMethod	: 多変数ニュートン法を利用して連立程式を解くクラス
CFluidParameter			: 流体の状態を格納するためのクラス


*****************************************************************************************************************************************************
DXPropertyの使い方
*****************************************************************************************************************************************************
#include"DXProperty_ver06.h"

void main()
{
	double P;	// 圧力[kPa]
	double h;	// エンタルピ[kJ/kg]
	double T;	// 温度[℃]

	DXProperty ref;					// DXPropertyクラスの宣言

	// セットアップ
	ref.reibai = "WATER.FLD";		// 冷媒の設定
	ref.joutai = "NBP";				// 基準状態の設定 ( 普通はIIR, 水はNBP )
	ref.LoadDLL("refprop.DLL");		// 読み込むDLLファイルの設定 ( 2種類以上の冷媒物性が必要な場合，それぞれの冷媒に対してDLLファイルが必要 )
	ref.setup();					// セットアップ

	// 物性値の計算
	ref.state_ph( P, h );	// 任意状態関数( 圧力，エンタルピ ) -> 物性値はRcクラスに格納される
	ref.state_tp( T, P );	// 単相状態関数( 温度, 圧力 )		-> 物性値はRcクラスに格納される
	ref.sat_p( P );			// 飽和状態関数( 圧力 ) -> 飽和液の物性値はRlクラスに, 飽和蒸気の物性値はRvクラスに格納される
	ref.sat_t( T );			// 飽和状態関数( 温度 ) -> 飽和液の物性値はRlクラスに, 飽和蒸気の物性値はRvクラスに格納される

	// 物性値の呼び出し
	T = ref.Rc.T;			//Rcクラスの温度を呼び出すとき
}


*****************************************************************************************************************************************************
CNewtonRaphsonMethodの使い方
*****************************************************************************************************************************************************
// a * b = 10
// b * c = 20
// c * a = 30
// を解くプログラム
#include "CNewtonRaphsonMethod.h"

void main()
{
	//初期値
	double a = 5;
	double b = 5;
	double c = 5;
	
	CNewtonRaphsonMethod mnm;		// CNewtonRaphsonMethodクラスの宣言
	mnm.setup(10);					//セットアップ　※引数はニュートン法の変数以上にする

	// 初期値の代入
	mnm.setValue( 0 , a );
	mnm.setValue( 1 , b );
	mnm.setValue( 2 , c );

	//mnm.setAcc(0.8);				//加速度勾配の入力　※なくても可

	mnm.initial();					//計算を開始する前に必ず初期化してください
	for(mnm.main_loop_init();mnm.main_loop_check();mnm.main_loop_reinit()){		// おまじない
		for(mnm.sub_loop_init();mnm.sub_loop_check();mnm.sub_loop_reinit()){	// おまじない

			//値の設定
			a = mnm.getValue(0);
			b = mnm.getValue(1);
			c = mnm.getValue(2);

			//エラー値(ここに式を入力する)
			mnm.setError( 0 , a * b , 10 );
			mnm.setError( 1 , b * c , 20 );
			mnm.setError( 2 , c * a , 30 );

			mnm.prt();				//エラー表示
			mnm.prt_sum();			//エラーの合計を表示
		}
	}

	cout << "a = " << a << endl;
	cout << "b = " << b << endl;
	cout << "c = " << c << endl;
}


*****************************************************************************************************************************************************
CFluidParameterの使い方
*****************************************************************************************************************************************************
#include "CFluidParamter.h"

void main()
{
	CFluidParameter R_t1;

	R_t1.G = 0.1	// 質量流量[kg/s]
	R_t1.P = 2000.0	// 圧力[kPa]
	R_t1.h = 400.0	// エンタルピ[kJ/kg]

	// 格納できる値の詳細はCFluidParamter.hを参照
}

*****************************************************************************************************************************************************/